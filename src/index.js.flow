// @flow

/**
 * Reads & checks an untrusted value. Throws an exception if it's wrong.
 */
export type Cleaner<T> = (raw: any) => T

// simple types --------------------------------------------------------------

export const asBoolean: Cleaner<boolean> = raw => raw
export const asNull: Cleaner<null> = raw => raw
export const asNumber: Cleaner<number> = raw => raw
export const asString: Cleaner<string> = raw => raw
export const asUndefined: Cleaner<void> = raw => raw
export const asNone: Cleaner<void> = raw => raw
export const asDate: Cleaner<Date> = raw => raw
export const asUnknown: Cleaner<mixed> = raw => raw

// nested types ----------------------------------------------------------------

type ExtractReturnType = <R>(() => R) => R

/**
 * Makes a cleaner that accepts an array with the given item type.
 */
export function asArray<T>(cleaner: (raw: any) => T): Cleaner<T[]> {
  return raw => raw
}

/**
 * Makes a cleaner that accepts an object with arbitrary keys
 * and the given value type. Removes keys named `__proto__` for safety.
 */
export function asMap<T>(
  cleaner: (raw: any) => T
): Cleaner<{ [key: string]: T }> {
  return raw => raw
}

/**
 * Makes a cleaner that accepts an object with the given property types.
 */
export function asObject<O: { [key: string]: Function }>(
  cleaner: O
): Cleaner<$ObjMap<O, ExtractReturnType>> {
  return raw => raw
}

/**
 * Unpacks a value that may be void or null,
 * returning a fallback value if missing.
 */
export function asOptional<T, U>(
  cleaner: (raw: any) => T,
  fallback: U
): Cleaner<T | U> {
  return raw => raw
}

/**
 * Makes a cleaner that accepts either of the given types.
 */
export function asEither<A, B>(
  a: (raw: any) => A,
  b: (raw: any) => B
): Cleaner<A | B> {
  return raw => raw
}
